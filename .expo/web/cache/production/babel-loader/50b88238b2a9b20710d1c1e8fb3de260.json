{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useCallback,useEffect,useRef,useState}from\"react\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Modal from\"react-native-web/dist/exports/Modal\";import Animated from\"react-native-web/dist/exports/Animated\";import Colors from\"../assets/Colors.json\";var ModalPopup=function ModalPopup(_ref){var visible=_ref.visible,children=_ref.children;var _useState=useState(visible),_useState2=_slicedToArray(_useState,2),showModal=_useState2[0],setShowModal=_useState2[1];var scaleValue=useRef(new Animated.Value(0)).current;useEffect(function(){toggleModal();},[visible,toggleModal]);var toggleModal=useCallback(function(){if(visible){setShowModal(true);Animated.spring(scaleValue,{toValue:1,duration:200,useNativeDriver:true}).start();}else{setShowModal(false);Animated.timing(scaleValue,{toValue:0,duration:200,useNativeDriver:true}).start();}});return React.createElement(Modal,{transparent:true,visible:showModal},React.createElement(View,{style:styles.modalBackGround},React.createElement(Animated.View,{style:[styles.modalContainer,{transform:[{scale:scaleValue}]}]},children)));};var styles=StyleSheet.create({modalBackGround:{flex:1,backgroundColor:\"rgba(0,0,0,0.8)\",justifyContent:\"center\",alignItems:\"center\"},modalContainer:{width:\"80%\",backgroundColor:Colors.light,paddingHorizontal:20,paddingVertical:30,borderRadius:20,elevation:20}});export default ModalPopup;","map":{"version":3,"sources":["/home/spothu3469/JS/RN/upanishad-app/components/ModalPopup.js"],"names":["React","useCallback","useEffect","useRef","useState","Colors","ModalPopup","visible","children","showModal","setShowModal","scaleValue","Animated","Value","current","toggleModal","spring","toValue","duration","useNativeDriver","start","timing","styles","modalBackGround","modalContainer","transform","scale","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","width","light","paddingHorizontal","paddingVertical","borderRadius","elevation"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,MAAxC,CAAgDC,QAAhD,KAAgE,OAAhE,C,0OAEA,MAAOC,CAAAA,MAAP,6BAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAA2B,IAAxBC,CAAAA,OAAwB,MAAxBA,OAAwB,CAAfC,QAAe,MAAfA,QAAe,eACVJ,QAAQ,CAACG,OAAD,CADE,wCACrCE,SADqC,eAC1BC,YAD0B,eAE5C,GAAMC,CAAAA,UAAU,CAAGR,MAAM,CAAC,GAAIS,CAAAA,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAjD,CACAZ,SAAS,CAAC,UAAM,CACda,WAAW,GACZ,CAFQ,CAEN,CAACR,OAAD,CAAUQ,WAAV,CAFM,CAAT,CAIA,GAAMA,CAAAA,WAAW,CAAGd,WAAW,CAAC,UAAM,CACpC,GAAIM,OAAJ,CAAa,CACXG,YAAY,CAAC,IAAD,CAAZ,CACAE,QAAQ,CAACI,MAAT,CAAgBL,UAAhB,CAA4B,CAC1BM,OAAO,CAAE,CADiB,CAE1BC,QAAQ,CAAE,GAFgB,CAG1BC,eAAe,CAAE,IAHS,CAA5B,EAIGC,KAJH,GAKD,CAPD,IAOO,CACLV,YAAY,CAAC,KAAD,CAAZ,CACAE,QAAQ,CAACS,MAAT,CAAgBV,UAAhB,CAA4B,CAC1BM,OAAO,CAAE,CADiB,CAE1BC,QAAQ,CAAE,GAFgB,CAG1BC,eAAe,CAAE,IAHS,CAA5B,EAIGC,KAJH,GAKD,CACF,CAhB8B,CAA/B,CAkBA,MACE,qBAAC,KAAD,EAAO,WAAW,KAAlB,CAAmB,OAAO,CAAEX,SAA5B,EACE,oBAAC,IAAD,EAAM,KAAK,CAAEa,MAAM,CAACC,eAApB,EACE,oBAAC,QAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACLD,MAAM,CAACE,cADF,CAEL,CAAEC,SAAS,CAAE,CAAC,CAAEC,KAAK,CAAEf,UAAT,CAAD,CAAb,CAFK,CADT,EAMGH,QANH,CADF,CADF,CADF,CAcD,CAvCD,CAyCA,GAAMc,CAAAA,MAAM,CAAGK,UAAU,CAACC,MAAX,CAAkB,CAC/BL,eAAe,CAAE,CACfM,IAAI,CAAE,CADS,CAEfC,eAAe,CAAE,iBAFF,CAGfC,cAAc,CAAE,QAHD,CAIfC,UAAU,CAAE,QAJG,CADc,CAO/BR,cAAc,CAAE,CACdS,KAAK,CAAE,KADO,CAEdH,eAAe,CAAEzB,MAAM,CAAC6B,KAFV,CAGdC,iBAAiB,CAAE,EAHL,CAIdC,eAAe,CAAE,EAJH,CAKdC,YAAY,CAAE,EALA,CAMdC,SAAS,CAAE,EANG,CAPe,CAAlB,CAAf,CAiBA,cAAehC,CAAAA,UAAf","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { View, StyleSheet, Modal, Animated } from \"react-native\";\nimport Colors from \"../assets/Colors.json\";\n\nconst ModalPopup = ({ visible, children }) => {\n  const [showModal, setShowModal] = useState(visible);\n  const scaleValue = useRef(new Animated.Value(0)).current;\n  useEffect(() => {\n    toggleModal();\n  }, [visible, toggleModal]);\n\n  const toggleModal = useCallback(() => {\n    if (visible) {\n      setShowModal(true);\n      Animated.spring(scaleValue, {\n        toValue: 1,\n        duration: 200,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      setShowModal(false);\n      Animated.timing(scaleValue, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true,\n      }).start();\n    }\n  });\n\n  return (\n    <Modal transparent visible={showModal}>\n      <View style={styles.modalBackGround}>\n        <Animated.View\n          style={[\n            styles.modalContainer,\n            { transform: [{ scale: scaleValue }] },\n          ]}\n        >\n          {children}\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  modalBackGround: {\n    flex: 1,\n    backgroundColor: \"rgba(0,0,0,0.8)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  modalContainer: {\n    width: \"80%\",\n    backgroundColor: Colors.light,\n    paddingHorizontal: 20,\n    paddingVertical: 30,\n    borderRadius: 20,\n    elevation: 20,\n  },\n});\n\nexport default ModalPopup;\n"]},"metadata":{},"sourceType":"module"}