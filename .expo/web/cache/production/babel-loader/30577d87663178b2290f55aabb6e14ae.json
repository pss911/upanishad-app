{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useEffect}from\"react\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import Navigation from\"../components/Navigation\";import SlokaNMeaningCard from\"../components/SlokaNMeaningCard\";var SlokaCards=function SlokaCards(_ref){var id=_ref.id,setVisible=_ref.setVisible,data=_ref.data,nextIndex=_ref.nextIndex;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),index=_useState2[0],setIndex=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),meaningType=_useState4[0],setMeaningType=_useState4[1];useEffect(function(){setIndex(nextIndex);},[nextIndex]);return React.createElement(React.Fragment,null,data?React.createElement(React.Fragment,null,React.createElement(Navigation,{setVisible:setVisible,id:data[index].id,leftClick:function leftClick(){if(index>0){setIndex(index-1);setMeaningType(undefined);}else{null;}},rightClick:function rightClick(){if(index<data.length-1){setIndex(index+1);setMeaningType(undefined);}else{null;}}}),React.createElement(ScrollView,{style:styles.container},React.createElement(ScrollView,null,React.createElement(SlokaNMeaningCard,{sloka:data[index].sloka,meaningType:meaningType,setMeaningType:setMeaningType,wordToWordMeaning:data[index].wordByWordMeaning,meaning:data[index].meaning})))):React.createElement(ScrollView,null));};var styles=StyleSheet.create({container:{marginHorizontal:10}});export default SlokaCards;","map":{"version":3,"sources":["/home/_11spothukuchi/JS/Apps/upanishad-app/containers/Sloka.js"],"names":["React","useState","useEffect","Navigation","SlokaNMeaningCard","SlokaCards","id","setVisible","data","nextIndex","index","setIndex","meaningType","setMeaningType","undefined","length","styles","container","sloka","wordByWordMeaning","meaning","StyleSheet","create","marginHorizontal"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,kIAEA,MAAOC,CAAAA,UAAP,gCACA,MAAOC,CAAAA,iBAAP,uCAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAyC,IAAtCC,CAAAA,EAAsC,MAAtCA,EAAsC,CAAlCC,UAAkC,MAAlCA,UAAkC,CAAtBC,IAAsB,MAAtBA,IAAsB,CAAhBC,SAAgB,MAAhBA,SAAgB,CAC1D,cAA0BR,QAAQ,CAAC,CAAD,CAAlC,wCAAOS,KAAP,eAAcC,QAAd,eACA,eAAsCV,QAAQ,EAA9C,yCAAOW,WAAP,eAAoBC,cAApB,eACAX,SAAS,CAAC,UAAM,CACdS,QAAQ,CAACF,SAAD,CAAR,CACD,CAFQ,CAEN,CAACA,SAAD,CAFM,CAAT,CAGA,MACE,yCACGD,IAAI,CACH,wCACE,oBAAC,UAAD,EACE,UAAU,CAAED,UADd,CAEE,EAAE,CAAEC,IAAI,CAACE,KAAD,CAAJ,CAAYJ,EAFlB,CAGE,SAAS,CAAE,oBAAM,CACf,GAAII,KAAK,CAAG,CAAZ,CAAe,CACbC,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CACAG,cAAc,CAACC,SAAD,CAAd,CACD,CAHD,IAGO,CACL,KACD,CACF,CAVH,CAWE,UAAU,CAAE,qBAAM,CAChB,GAAIJ,KAAK,CAAGF,IAAI,CAACO,MAAL,CAAc,CAA1B,CAA6B,CAC3BJ,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CACAG,cAAc,CAACC,SAAD,CAAd,CACD,CAHD,IAGO,CACL,KACD,CACF,CAlBH,EADF,CAqBE,oBAAC,UAAD,EAAY,KAAK,CAAEE,MAAM,CAACC,SAA1B,EACE,oBAAC,UAAD,MACE,oBAAC,iBAAD,EACE,KAAK,CAAET,IAAI,CAACE,KAAD,CAAJ,CAAYQ,KADrB,CAEE,WAAW,CAAEN,WAFf,CAGE,cAAc,CAAEC,cAHlB,CAIE,iBAAiB,CAAEL,IAAI,CAACE,KAAD,CAAJ,CAAYS,iBAJjC,CAKE,OAAO,CAAEX,IAAI,CAACE,KAAD,CAAJ,CAAYU,OALvB,EADF,CADF,CArBF,CADG,CAmCH,oBAAC,UAAD,MApCJ,CADF,CAyCD,CA/CD,CAiDA,GAAMJ,CAAAA,MAAM,CAAGK,UAAU,CAACC,MAAX,CAAkB,CAC/BL,SAAS,CAAE,CACTM,gBAAgB,CAAE,EADT,CADoB,CAAlB,CAAf,CAMA,cAAelB,CAAAA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, ScrollView } from \"react-native\";\nimport Navigation from \"../components/Navigation\";\nimport SlokaNMeaningCard from \"../components/SlokaNMeaningCard\";\n\nconst SlokaCards = ({ id, setVisible, data, nextIndex }) => {\n  const [index, setIndex] = useState(0);\n  const [meaningType, setMeaningType] = useState();\n  useEffect(() => {\n    setIndex(nextIndex);\n  }, [nextIndex]);\n  return (\n    <>\n      {data ? (\n        <>\n          <Navigation\n            setVisible={setVisible}\n            id={data[index].id}\n            leftClick={() => {\n              if (index > 0) {\n                setIndex(index - 1);\n                setMeaningType(undefined);\n              } else {\n                null;\n              }\n            }}\n            rightClick={() => {\n              if (index < data.length - 1) {\n                setIndex(index + 1);\n                setMeaningType(undefined);\n              } else {\n                null;\n              }\n            }}\n          />\n          <ScrollView style={styles.container}>\n            <ScrollView>\n              <SlokaNMeaningCard\n                sloka={data[index].sloka}\n                meaningType={meaningType}\n                setMeaningType={setMeaningType}\n                wordToWordMeaning={data[index].wordByWordMeaning}\n                meaning={data[index].meaning}\n              />\n            </ScrollView>\n          </ScrollView>\n        </>\n      ) : (\n        <ScrollView></ScrollView>\n      )}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n  },\n});\n\nexport default SlokaCards;\n"]},"metadata":{},"sourceType":"module"}